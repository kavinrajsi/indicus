var GBWAWidget = (function (exports) {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }

    var WIDGET_OPEN_WIDTH = 400;
    var WIDGET_OPEN_HEIGHT = 525;
    var WIDGET_MINIMIZED_WIDTH = 192;
    var WIDGET_MINIMIZED_HEIGHT = 62;
    var WIDGET_MARGIN = 4;
    var config = {};
    var widget;
    var iframe;
    var hookQueue = [];
    var ready = false;
    var smallScreen = false;
    var bodyStyle;
    var scrollPosition;
    var log = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (config.debug) {
            (_a = window.console).log.apply(_a, __spreadArray(["%cwidget-script%c", "color: blue", "color: initial"], args));
        }
    };
    // hooks
    var callHook = function (action, params) {
        if (!ready) {
            hookQueue.push([action, params]);
            return;
        }
        var data = {
            src: "gb.whatsapp.widget",
            fn: action,
            args: params,
        };
        if (iframe.contentWindow) {
            log("postMessage." + action, params);
            iframe.contentWindow.postMessage(data, "*");
        }
    };
    var updateWidgetStyle = function (isOpened, options) {
        if (smallScreen) {
            if (isOpened) {
                scrollPosition = document.documentElement.scrollTop;
                bodyStyle = document.body.style.cssText;
                document.body.style.cssText += "overflow: hidden; height: 100%; width: 100%; position: fixed; top: " + scrollPosition + "px;";
            }
            else {
                document.body.style.cssText = bodyStyle;
                document.documentElement.scrollTop = scrollPosition;
            }
        }
        if (isOpened) {
            iframe.style.left = smallScreen ? "0" : "auto";
            /**
             * If we use iframe.style.height = smallScreen ? '100vh' : ...
             * In above case some browser's viewport height is not rendered correctly
             * so, as 100vh will resolve to 100% of the current viewport height,
             * so fixed it to 100% avoiding problem for some browsers. Similar resolution
             * for iframe.style.width
             */
            iframe.style.width = smallScreen ? "100%" : WIDGET_MARGIN + WIDGET_OPEN_WIDTH + WIDGET_MARGIN + "px";
            iframe.style.height = smallScreen
                ? "100%"
                : WIDGET_MARGIN + WIDGET_OPEN_HEIGHT + WIDGET_MARGIN + WIDGET_MINIMIZED_HEIGHT + WIDGET_MARGIN + "px";
        }
        else {
            iframe.style.left = "auto";
            iframe.style.width = (options === null || options === void 0 ? void 0 : options.triggerMessage)
                ? WIDGET_MARGIN + WIDGET_MINIMIZED_WIDTH + WIDGET_MARGIN + "px"
                : "60px";
            iframe.style.height = WIDGET_MARGIN + WIDGET_MINIMIZED_HEIGHT + WIDGET_MARGIN + "px";
        }
    };
    var createWidget = function (url, options) {
        var _a;
        widget = document.createElement("div");
        widget.className = "gb-waw";
        widget.style.position = "absolute";
        widget.style.zIndex = "2147483647";
        widget.dataset.state = "closed";
        iframe = document.createElement("iframe");
        iframe.id = "gb-waw-iframe";
        iframe.allowTransparency = "true";
        iframe.src = url;
		iframe.title = "Indicus";
        iframe.setAttribute("style", "border: none; display: block; position: fixed; top: auto; bottom:12px; visibility: visible; max-width: 100vw; transition: all 0.3s ease-in-out, width 0ms; background: none transparent; opacity: 1; pointer-events: auto; touch-action: auto;");
        iframe.style.width = (options === null || options === void 0 ? void 0 : options.triggerMessage)
            ? WIDGET_MARGIN + WIDGET_MINIMIZED_WIDTH + WIDGET_MARGIN + "px"
            : "60px";
        iframe.style.height = WIDGET_MARGIN + WIDGET_MINIMIZED_HEIGHT + WIDGET_MARGIN + "px";
        iframe.style.maxHeight = "100vh";
        if (((_a = config === null || config === void 0 ? void 0 : config.options) === null || _a === void 0 ? void 0 : _a.widgetPosition) === "RIGHT") {
            iframe.style.left = "auto";
            iframe.style.right = "12px";
        }
        else {
            iframe.style.left = "12px";
            iframe.style.right = "auto";
        }
        iframe.style.zIndex = "2147483647";
        widget.appendChild(iframe);
        document.body.appendChild(widget);
        var handleMediaQueryTest = function (_a) {
            var matches = _a.matches;
            if (!widget) {
                return;
            }
            smallScreen = matches;
            updateWidgetStyle(widget.dataset.state === "opened", options);
            callHook("setExpanded", smallScreen);
        };
        var mediaQueryList = window.matchMedia("screen and (max-device-width: 480px)");
        mediaQueryList.addListener(handleMediaQueryTest);
        handleMediaQueryTest(mediaQueryList);
    };
    var openWidget = function () {
        if (widget.dataset.state === "opened") {
            return;
        }
        updateWidgetStyle(true);
        widget.dataset.state = "opened";
        iframe.focus();
    };
    function closeWidget() {
        if (widget.dataset.state === "closed") {
            return;
        }
        updateWidgetStyle(false);
        widget.dataset.state = "closed";
    }
    var api = {
        popup: null,
        ready: function () {
            ready = true;
            if (hookQueue.length > 0) {
                hookQueue.forEach(function (hookParams) {
                    // eslint-disable-next-line prefer-spread
                    callHook.apply(null, hookParams);
                });
                hookQueue = [];
            }
        },
        minimizeWindow: function () {
            closeWidget();
        },
        restoreWindow: function () {
            if (api.popup && api.popup.closed !== true) {
                api.popup.close();
                api.popup = null;
            }
            openWidget();
        },
        openPopout: function () {
            if (!config.url) {
                return;
            }
            closeWidget();
            api.popup = window.open("" + config.url + (config.url.lastIndexOf("?") > -1 ? "&" : "?") + "mode=popout" + (config.hash ? "#" + config.hash : ""), "livechat-popout", "width=" + WIDGET_OPEN_WIDTH + ", height=" + WIDGET_OPEN_HEIGHT + ", toolbars=no");
            if (api.popup)
                api.popup.focus();
        },
        openWidget: function () {
            openWidget();
        },
        removeWidget: function () {
            document.body.removeChild(widget);
        },
        showWidget: function () {
            iframe.style.display = "initial";
        },
        hideWidget: function () {
            iframe.style.display = "none";
        },
    };
    var attachMessageListener = function () {
        window.addEventListener("message", function (msg) {
            if (typeof msg.data === "object" && msg.data.src !== undefined && msg.data.src === "gb.whatsapp.widget") {
                if (api[msg.data.fn] !== undefined && typeof api[msg.data.fn] === "function") {
                    var args = [].concat(msg.data.args || []);
                    log.apply(void 0, __spreadArray(["receivedMessage." + msg.data.fn], args));
                    api[msg.data.fn].apply(null, args);
                }
            }
        }, false);
    };
    var pageVisited = function () {
        callHook("pageVisited", {
            url: window.location.href,
            referrer: window.document.referrer || "",
            width: window.innerWidth,
            title: document.title || "",
            time: new Date(),
        });
    };
    var attachPopStateListener = function () {
        window.addEventListener("popstate", pageVisited);
        pageVisited();
    };
    var init = function (c) {
        var url = c.url, hash = c.hash, options = c.options;
        if (!url) {
            return;
        }
        config = __assign({}, c);
        var iframeUrl = "" + url + (hash ? "#" + hash : "");
        createWidget(iframeUrl, options);
        attachMessageListener();
        attachPopStateListener();
        if (options) {
            callHook("config", options);
        }
    };
    init(window.gbwawc);
    /* if (typeof window.gbwawc.url !== "undefined") {
        GBWAWidget.init(window.gbwawc);
    } */

    exports.init = init;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}));
